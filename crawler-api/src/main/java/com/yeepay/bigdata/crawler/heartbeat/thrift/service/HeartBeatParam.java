/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yeepay.bigdata.crawler.heartbeat.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 心跳参数:
 */
public class HeartBeatParam implements org.apache.thrift.TBase<HeartBeatParam, HeartBeatParam._Fields>, java.io.Serializable, Cloneable, Comparable<HeartBeatParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HeartBeatParam");

  private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_TASK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("totalTaskNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField WAITING_TASK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("waitingTaskNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACTIVE_TASK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("activeTaskNum", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HeartBeatParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HeartBeatParamTupleSchemeFactory());
  }

  public WorkerInfo info; // required
  public int totalTaskNum; // optional
  public int waitingTaskNum; // optional
  public int activeTaskNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INFO((short)1, "info"),
    TOTAL_TASK_NUM((short)2, "totalTaskNum"),
    WAITING_TASK_NUM((short)3, "waitingTaskNum"),
    ACTIVE_TASK_NUM((short)4, "activeTaskNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INFO
          return INFO;
        case 2: // TOTAL_TASK_NUM
          return TOTAL_TASK_NUM;
        case 3: // WAITING_TASK_NUM
          return WAITING_TASK_NUM;
        case 4: // ACTIVE_TASK_NUM
          return ACTIVE_TASK_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALTASKNUM_ISSET_ID = 0;
  private static final int __WAITINGTASKNUM_ISSET_ID = 1;
  private static final int __ACTIVETASKNUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TOTAL_TASK_NUM,_Fields.WAITING_TASK_NUM,_Fields.ACTIVE_TASK_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkerInfo.class)));
    tmpMap.put(_Fields.TOTAL_TASK_NUM, new org.apache.thrift.meta_data.FieldMetaData("totalTaskNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.WAITING_TASK_NUM, new org.apache.thrift.meta_data.FieldMetaData("waitingTaskNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.ACTIVE_TASK_NUM, new org.apache.thrift.meta_data.FieldMetaData("activeTaskNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HeartBeatParam.class, metaDataMap);
  }

  public HeartBeatParam() {
  }

  public HeartBeatParam(
    WorkerInfo info)
  {
    this();
    this.info = info;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HeartBeatParam(HeartBeatParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInfo()) {
      this.info = new WorkerInfo(other.info);
    }
    this.totalTaskNum = other.totalTaskNum;
    this.waitingTaskNum = other.waitingTaskNum;
    this.activeTaskNum = other.activeTaskNum;
  }

  public HeartBeatParam deepCopy() {
    return new HeartBeatParam(this);
  }

  @Override
  public void clear() {
    this.info = null;
    setTotalTaskNumIsSet(false);
    this.totalTaskNum = 0;
    setWaitingTaskNumIsSet(false);
    this.waitingTaskNum = 0;
    setActiveTaskNumIsSet(false);
    this.activeTaskNum = 0;
  }

  public WorkerInfo getInfo() {
    return this.info;
  }

  public HeartBeatParam setInfo(WorkerInfo info) {
    this.info = info;
    return this;
  }

  public void unsetInfo() {
    this.info = null;
  }

  /** Returns true if field info is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo() {
    return this.info != null;
  }

  public void setInfoIsSet(boolean value) {
    if (!value) {
      this.info = null;
    }
  }

  public int getTotalTaskNum() {
    return this.totalTaskNum;
  }

  public HeartBeatParam setTotalTaskNum(int totalTaskNum) {
    this.totalTaskNum = totalTaskNum;
    setTotalTaskNumIsSet(true);
    return this;
  }

  public void unsetTotalTaskNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALTASKNUM_ISSET_ID);
  }

  /** Returns true if field totalTaskNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalTaskNum() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALTASKNUM_ISSET_ID);
  }

  public void setTotalTaskNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALTASKNUM_ISSET_ID, value);
  }

  public int getWaitingTaskNum() {
    return this.waitingTaskNum;
  }

  public HeartBeatParam setWaitingTaskNum(int waitingTaskNum) {
    this.waitingTaskNum = waitingTaskNum;
    setWaitingTaskNumIsSet(true);
    return this;
  }

  public void unsetWaitingTaskNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WAITINGTASKNUM_ISSET_ID);
  }

  /** Returns true if field waitingTaskNum is set (has been assigned a value) and false otherwise */
  public boolean isSetWaitingTaskNum() {
    return EncodingUtils.testBit(__isset_bitfield, __WAITINGTASKNUM_ISSET_ID);
  }

  public void setWaitingTaskNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WAITINGTASKNUM_ISSET_ID, value);
  }

  public int getActiveTaskNum() {
    return this.activeTaskNum;
  }

  public HeartBeatParam setActiveTaskNum(int activeTaskNum) {
    this.activeTaskNum = activeTaskNum;
    setActiveTaskNumIsSet(true);
    return this;
  }

  public void unsetActiveTaskNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVETASKNUM_ISSET_ID);
  }

  /** Returns true if field activeTaskNum is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveTaskNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVETASKNUM_ISSET_ID);
  }

  public void setActiveTaskNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVETASKNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INFO:
      if (value == null) {
        unsetInfo();
      } else {
        setInfo((WorkerInfo)value);
      }
      break;

    case TOTAL_TASK_NUM:
      if (value == null) {
        unsetTotalTaskNum();
      } else {
        setTotalTaskNum((Integer)value);
      }
      break;

    case WAITING_TASK_NUM:
      if (value == null) {
        unsetWaitingTaskNum();
      } else {
        setWaitingTaskNum((Integer)value);
      }
      break;

    case ACTIVE_TASK_NUM:
      if (value == null) {
        unsetActiveTaskNum();
      } else {
        setActiveTaskNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INFO:
      return getInfo();

    case TOTAL_TASK_NUM:
      return Integer.valueOf(getTotalTaskNum());

    case WAITING_TASK_NUM:
      return Integer.valueOf(getWaitingTaskNum());

    case ACTIVE_TASK_NUM:
      return Integer.valueOf(getActiveTaskNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INFO:
      return isSetInfo();
    case TOTAL_TASK_NUM:
      return isSetTotalTaskNum();
    case WAITING_TASK_NUM:
      return isSetWaitingTaskNum();
    case ACTIVE_TASK_NUM:
      return isSetActiveTaskNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HeartBeatParam)
      return this.equals((HeartBeatParam)that);
    return false;
  }

  public boolean equals(HeartBeatParam that) {
    if (that == null)
      return false;

    boolean this_present_info = true && this.isSetInfo();
    boolean that_present_info = true && that.isSetInfo();
    if (this_present_info || that_present_info) {
      if (!(this_present_info && that_present_info))
        return false;
      if (!this.info.equals(that.info))
        return false;
    }

    boolean this_present_totalTaskNum = true && this.isSetTotalTaskNum();
    boolean that_present_totalTaskNum = true && that.isSetTotalTaskNum();
    if (this_present_totalTaskNum || that_present_totalTaskNum) {
      if (!(this_present_totalTaskNum && that_present_totalTaskNum))
        return false;
      if (this.totalTaskNum != that.totalTaskNum)
        return false;
    }

    boolean this_present_waitingTaskNum = true && this.isSetWaitingTaskNum();
    boolean that_present_waitingTaskNum = true && that.isSetWaitingTaskNum();
    if (this_present_waitingTaskNum || that_present_waitingTaskNum) {
      if (!(this_present_waitingTaskNum && that_present_waitingTaskNum))
        return false;
      if (this.waitingTaskNum != that.waitingTaskNum)
        return false;
    }

    boolean this_present_activeTaskNum = true && this.isSetActiveTaskNum();
    boolean that_present_activeTaskNum = true && that.isSetActiveTaskNum();
    if (this_present_activeTaskNum || that_present_activeTaskNum) {
      if (!(this_present_activeTaskNum && that_present_activeTaskNum))
        return false;
      if (this.activeTaskNum != that.activeTaskNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HeartBeatParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInfo()).compareTo(other.isSetInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalTaskNum()).compareTo(other.isSetTotalTaskNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalTaskNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalTaskNum, other.totalTaskNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaitingTaskNum()).compareTo(other.isSetWaitingTaskNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaitingTaskNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waitingTaskNum, other.waitingTaskNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveTaskNum()).compareTo(other.isSetActiveTaskNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveTaskNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeTaskNum, other.activeTaskNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HeartBeatParam(");
    boolean first = true;

    sb.append("info:");
    if (this.info == null) {
      sb.append("null");
    } else {
      sb.append(this.info);
    }
    first = false;
    if (isSetTotalTaskNum()) {
      if (!first) sb.append(", ");
      sb.append("totalTaskNum:");
      sb.append(this.totalTaskNum);
      first = false;
    }
    if (isSetWaitingTaskNum()) {
      if (!first) sb.append(", ");
      sb.append("waitingTaskNum:");
      sb.append(this.waitingTaskNum);
      first = false;
    }
    if (isSetActiveTaskNum()) {
      if (!first) sb.append(", ");
      sb.append("activeTaskNum:");
      sb.append(this.activeTaskNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (info == null) {
      throw new TProtocolException("Required field 'info' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (info != null) {
      info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HeartBeatParamStandardSchemeFactory implements SchemeFactory {
    public HeartBeatParamStandardScheme getScheme() {
      return new HeartBeatParamStandardScheme();
    }
  }

  private static class HeartBeatParamStandardScheme extends StandardScheme<HeartBeatParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HeartBeatParam struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.info = new WorkerInfo();
              struct.info.read(iprot);
              struct.setInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL_TASK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalTaskNum = iprot.readI32();
              struct.setTotalTaskNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WAITING_TASK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.waitingTaskNum = iprot.readI32();
              struct.setWaitingTaskNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTIVE_TASK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeTaskNum = iprot.readI32();
              struct.setActiveTaskNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HeartBeatParam struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.info != null) {
        oprot.writeFieldBegin(INFO_FIELD_DESC);
        struct.info.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalTaskNum()) {
        oprot.writeFieldBegin(TOTAL_TASK_NUM_FIELD_DESC);
        oprot.writeI32(struct.totalTaskNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWaitingTaskNum()) {
        oprot.writeFieldBegin(WAITING_TASK_NUM_FIELD_DESC);
        oprot.writeI32(struct.waitingTaskNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveTaskNum()) {
        oprot.writeFieldBegin(ACTIVE_TASK_NUM_FIELD_DESC);
        oprot.writeI32(struct.activeTaskNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HeartBeatParamTupleSchemeFactory implements SchemeFactory {
    public HeartBeatParamTupleScheme getScheme() {
      return new HeartBeatParamTupleScheme();
    }
  }

  private static class HeartBeatParamTupleScheme extends TupleScheme<HeartBeatParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HeartBeatParam struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.info.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetTotalTaskNum()) {
        optionals.set(0);
      }
      if (struct.isSetWaitingTaskNum()) {
        optionals.set(1);
      }
      if (struct.isSetActiveTaskNum()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTotalTaskNum()) {
        oprot.writeI32(struct.totalTaskNum);
      }
      if (struct.isSetWaitingTaskNum()) {
        oprot.writeI32(struct.waitingTaskNum);
      }
      if (struct.isSetActiveTaskNum()) {
        oprot.writeI32(struct.activeTaskNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HeartBeatParam struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.info = new WorkerInfo();
      struct.info.read(iprot);
      struct.setInfoIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.totalTaskNum = iprot.readI32();
        struct.setTotalTaskNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.waitingTaskNum = iprot.readI32();
        struct.setWaitingTaskNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.activeTaskNum = iprot.readI32();
        struct.setActiveTaskNumIsSet(true);
      }
    }
  }

}

