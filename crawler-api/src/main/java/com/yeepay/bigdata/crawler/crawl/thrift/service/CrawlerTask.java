/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.yeepay.bigdata.crawler.crawl.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 抓取任务分配请求参数
 */
public class CrawlerTask implements org.apache.thrift.TBase<CrawlerTask, CrawlerTask._Fields>, java.io.Serializable, Cloneable, Comparable<CrawlerTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CrawlerTask");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_DYNAMIC_FIELD_DESC = new org.apache.thrift.protocol.TField("isDynamic", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField CTX_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("ctxMap", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CrawlerTaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CrawlerTaskTupleSchemeFactory());
  }

  public String id; // required
  public String url; // required
  public boolean isDynamic; // required
  public Map<String,String> ctxMap; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    URL((short)2, "url"),
    IS_DYNAMIC((short)3, "isDynamic"),
    CTX_MAP((short)4, "ctxMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // URL
          return URL;
        case 3: // IS_DYNAMIC
          return IS_DYNAMIC;
        case 4: // CTX_MAP
          return CTX_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISDYNAMIC_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CTX_MAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_DYNAMIC, new org.apache.thrift.meta_data.FieldMetaData("isDynamic", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CTX_MAP, new org.apache.thrift.meta_data.FieldMetaData("ctxMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CrawlerTask.class, metaDataMap);
  }

  public CrawlerTask() {
  }

  public CrawlerTask(
    String id,
    String url,
    boolean isDynamic)
  {
    this();
    this.id = id;
    this.url = url;
    this.isDynamic = isDynamic;
    setIsDynamicIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CrawlerTask(CrawlerTask other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.isDynamic = other.isDynamic;
    if (other.isSetCtxMap()) {
      Map<String,String> __this__ctxMap = new HashMap<String,String>(other.ctxMap);
      this.ctxMap = __this__ctxMap;
    }
  }

  public CrawlerTask deepCopy() {
    return new CrawlerTask(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.url = null;
    setIsDynamicIsSet(false);
    this.isDynamic = false;
    this.ctxMap = null;
  }

  public String getId() {
    return this.id;
  }

  public CrawlerTask setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public CrawlerTask setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public boolean isIsDynamic() {
    return this.isDynamic;
  }

  public CrawlerTask setIsDynamic(boolean isDynamic) {
    this.isDynamic = isDynamic;
    setIsDynamicIsSet(true);
    return this;
  }

  public void unsetIsDynamic() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDYNAMIC_ISSET_ID);
  }

  /** Returns true if field isDynamic is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDynamic() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDYNAMIC_ISSET_ID);
  }

  public void setIsDynamicIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDYNAMIC_ISSET_ID, value);
  }

  public int getCtxMapSize() {
    return (this.ctxMap == null) ? 0 : this.ctxMap.size();
  }

  public void putToCtxMap(String key, String val) {
    if (this.ctxMap == null) {
      this.ctxMap = new HashMap<String,String>();
    }
    this.ctxMap.put(key, val);
  }

  public Map<String,String> getCtxMap() {
    return this.ctxMap;
  }

  public CrawlerTask setCtxMap(Map<String,String> ctxMap) {
    this.ctxMap = ctxMap;
    return this;
  }

  public void unsetCtxMap() {
    this.ctxMap = null;
  }

  /** Returns true if field ctxMap is set (has been assigned a value) and false otherwise */
  public boolean isSetCtxMap() {
    return this.ctxMap != null;
  }

  public void setCtxMapIsSet(boolean value) {
    if (!value) {
      this.ctxMap = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case IS_DYNAMIC:
      if (value == null) {
        unsetIsDynamic();
      } else {
        setIsDynamic((Boolean)value);
      }
      break;

    case CTX_MAP:
      if (value == null) {
        unsetCtxMap();
      } else {
        setCtxMap((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case URL:
      return getUrl();

    case IS_DYNAMIC:
      return Boolean.valueOf(isIsDynamic());

    case CTX_MAP:
      return getCtxMap();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case URL:
      return isSetUrl();
    case IS_DYNAMIC:
      return isSetIsDynamic();
    case CTX_MAP:
      return isSetCtxMap();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CrawlerTask)
      return this.equals((CrawlerTask)that);
    return false;
  }

  public boolean equals(CrawlerTask that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_isDynamic = true;
    boolean that_present_isDynamic = true;
    if (this_present_isDynamic || that_present_isDynamic) {
      if (!(this_present_isDynamic && that_present_isDynamic))
        return false;
      if (this.isDynamic != that.isDynamic)
        return false;
    }

    boolean this_present_ctxMap = true && this.isSetCtxMap();
    boolean that_present_ctxMap = true && that.isSetCtxMap();
    if (this_present_ctxMap || that_present_ctxMap) {
      if (!(this_present_ctxMap && that_present_ctxMap))
        return false;
      if (!this.ctxMap.equals(that.ctxMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CrawlerTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDynamic()).compareTo(other.isSetIsDynamic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDynamic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDynamic, other.isDynamic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCtxMap()).compareTo(other.isSetCtxMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtxMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctxMap, other.ctxMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CrawlerTask(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDynamic:");
    sb.append(this.isDynamic);
    first = false;
    if (isSetCtxMap()) {
      if (!first) sb.append(", ");
      sb.append("ctxMap:");
      if (this.ctxMap == null) {
        sb.append("null");
      } else {
        sb.append(this.ctxMap);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (id == null) {
      throw new TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    if (url == null) {
      throw new TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'isDynamic' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CrawlerTaskStandardSchemeFactory implements SchemeFactory {
    public CrawlerTaskStandardScheme getScheme() {
      return new CrawlerTaskStandardScheme();
    }
  }

  private static class CrawlerTaskStandardScheme extends StandardScheme<CrawlerTask> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CrawlerTask struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_DYNAMIC
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDynamic = iprot.readBool();
              struct.setIsDynamicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CTX_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.ctxMap = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2;
                  String _val3;
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.ctxMap.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setCtxMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetIsDynamic()) {
        throw new TProtocolException("Required field 'isDynamic' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CrawlerTask struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_DYNAMIC_FIELD_DESC);
      oprot.writeBool(struct.isDynamic);
      oprot.writeFieldEnd();
      if (struct.ctxMap != null) {
        if (struct.isSetCtxMap()) {
          oprot.writeFieldBegin(CTX_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.ctxMap.size()));
            for (Map.Entry<String, String> _iter4 : struct.ctxMap.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CrawlerTaskTupleSchemeFactory implements SchemeFactory {
    public CrawlerTaskTupleScheme getScheme() {
      return new CrawlerTaskTupleScheme();
    }
  }

  private static class CrawlerTaskTupleScheme extends TupleScheme<CrawlerTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CrawlerTask struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeString(struct.url);
      oprot.writeBool(struct.isDynamic);
      BitSet optionals = new BitSet();
      if (struct.isSetCtxMap()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetCtxMap()) {
        {
          oprot.writeI32(struct.ctxMap.size());
          for (Map.Entry<String, String> _iter5 : struct.ctxMap.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CrawlerTask struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      struct.isDynamic = iprot.readBool();
      struct.setIsDynamicIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ctxMap = new HashMap<String,String>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            String _key8;
            String _val9;
            _key8 = iprot.readString();
            _val9 = iprot.readString();
            struct.ctxMap.put(_key8, _val9);
          }
        }
        struct.setCtxMapIsSet(true);
      }
    }
  }

}

